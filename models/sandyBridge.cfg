processor:{
	name = "sandyBridge";

# ---------------------------------------------------------------------------- #

	stages_widht:{
		fetch = 6;						# FETCH_WIDTH
		decode = 5;						# DECODE_WIDTH
		rename = 5;						# RENAME_WIDTH
		dispatch = 6;					# DISPATCH_WIDTH
		execute = 8;					# EXECUTE_WIDTH
		commit = 4;						# COMMIT_WIDTH
	}

# ---------------------------------------------------------------------------- #

	latencies:{
		fetch = 3;						# FETCH_LATENCY
		decode = 3;						# DECODE_LATENCY
		rename = 3;						# RENAME_LATENCY
		dispatch = 2;					# DISPATCH_LATENCY
		execute = 0;					# EXECUTE_LATENCY
		commit = 3;						# COMMIT_LATENCY
	}

# ---------------------------------------------------------------------------- #

	functional_units:{
		integer:{
			alu:{
				latency = 1;			# LATENCY_INTEGER_ALU
				wait_next = 1;		# WAIT_NEXT_INT_ALU
				integer = 3;			# INTEGER_ALU
			}

			mul:{
				latency = 3;			# LATENCY_INTEGER_MUL
				wait_next = 1;		# WAIT_NEXT_INT_MUL
				integer = 1;			# INTEGER_MUL
			}

			div:{
				latency = 32;			# LATENCY_INTEGER_DIV
				wait_next = 32;		# WAIT_NEXT_INT_DIV
				integer = 1;			# INTEGER_DIV
			}
		}

		# -------------------------------------- #

		floating_points:{
			alu:{
				latency = 3;			# LATENCY_FP_ALU
				wait_next = 1;		# WAIT_NEXT_FP_ALU
				FP = 1;						# FP_ALU
			}

			mul:{
				latency = 5;			# LATENCY_FP_MUL
				wait_next = 1;		# WAIT_NEXT_FP_MUL
				FP = 1;						# FP_MUL
			}

			div:{
				latency = 10;			# LATENCY_FP_DIV
				wait_next = 10;		# WAIT_NEXT_FP_DIV
				FP = 1;						# FP_DIV
			}
		}

		# -------------------------------------- #

		memory:{
			load:{
				latency = 2;			# LATENCY_MEM_LOAD
				wait_next = 1;		# WAIT_NEXT_MEM_LOAD
				unit = 1;					# LOAD_UNIT
			}
			store:{
				latency = 1;			# LATENCY_MEM_STORE
				wait_next = 1;		# WAIT_NEXT_MEM_STORE
				unit = 1;					# STORE_UNIT
			}
		}

		# -------------------------------------- #

		parallel_loads = 2;		# PARALLEL_LOADS
		parallel_stores = 1;	# PARALLEL_STORES
	}

# ---------------------------------------------------------------------------- #

	buffers_size:{
		fetch_buffer = 18;		# FETCH_BUFFER
		decode_buffer = 28;		# DECODE_BUFFER
		RAT_size = 260;				# RAT_SIZE
		ROB_size = 168;				# ROB_SIZE
		unified_RS = 54;			# UNIFIED_RS
	}

# ---------------------------------------------------------------------------- #

	MOB:{
		read = 64;						# MOB_READ
		write = 36;						# MOB_WRITE
	}

# ---------------------------------------------------------------------------- #

	branch_predictor:{
		entries = 4096;				# BTB_ENTRIES
		ways = 4;							# BTB_WAYS
	}

# ---------------------------------------------------------------------------- #

	btb_miss_penality = 5;						# BTB_MISS_PENALITY
	missprediction_penality = 10;			# MISSPREDICTION_PENALITY

	N = 128;								# N
	M = 128;								# M
	H = 43;									# H
	theta = 112.6;					# THETA

# ---------------------------------------------------------------------------- #

	caches:{
		attr_common:{
			line_size = 64;								# LINE_SIZE
			cache_levels = 2;							# CACHE_LEVELS
			instruction_enabled = 1;			# INSTRUCTION_ENABLED
			offset_size = 6;							# OFFSET_SIZE
		}

		# -------------------------------------- #

		levels:{
			l1_data:{
				size = 32768L;							# L1_DATA_SIZE
				associativity = 8;					# L1_DATA_ASSOCIATIVITY
				latency = 3;								# L1_DATA_LATENCY
			}

			l1_inst:{
				size = 32768L;							#	L1_INST_SIZE
				associativity = 8;					#	L1_INST_ASSOCIATIVITY
				latency = 3;								#	L1_INST_LATENCY
			}

			l2:{
				size = 262144L;							#	L2_SIZE
				associativity = 4;					#	L2_ASSOCIATIVITY
				latency = 12;								#	L2_LATENCY
			}

			llc:{
				size = 4096L;								#	LLC_SIZE
				associativity = 16;					#	LLC_ASSOCIATIVITY
				latency = 12;								#	LLC_LATENCY
			}
		}

		# -------------------------------------- #


		ram:{
			latency = 200;								# RAM_LATENCY
			size = 4294967296L;						# RAM_SIZE
		}

		prefetcher:{
			stride_table_size = 16;				# STRIDE_TABLE_SIZE
			degree = 1;										# DEGREE
			distance = 4;									# DISTANCE
		}

		memory_desambiguation:{
			load_hash_size = 512;					# LOAD_HASH_SIZE
			store_hash_size = 512;				# STORE_HASH_SIZE
			block_size = 4;								# DESAMBIGUATION_BLOCK_SIZE
		}

		address_to_address = 1;					# ADDRESS_TO_ADDRESS
		register_forward = 1;						# REGISTER_FORWARD

		emc:{
			width:{
				dispatch = 2;								# EMC_DISPATCH_WIDTH
				execute = 2;								# EMC_EXECUTE_WIDTH
				commit = 2;									# EMC_COMMIT_WIDTH
			}

			latencies:{
				dispatch = 1;								# EMC_DISPATCH_LATENCY
				integer = 1;								# EMC_INTEGER_LATENCY
				commit = 1;									# EMC_COMMIT_LATENCY
			}

			wait_next_integer = 1;				# EMC_WAIT_NEXT_INTEGER

			sizes:{
				integer_alu = 2;						# EMC_INTEGER_ALU
				unified_rs = 8;							# EMC_UNIFIED_RS
				uop_buffer = 16;						# EMC_UOP_BUFFER
				registers = 16;							# EMC_REGISTERS
				lsq_size = 16;							# EMC_LSQ_SIZE
			}

			cache:{
				size = 4096L;								# EMC_CACHE_SIZE
				associativity = 4;					# EMC_CACHE_ASSOCIATIVITY
				latency = 1;								# EMC_CACHE_LATENCY
			}
		}
	}

	heartbeat_clocks = 10000000;			# HEARTBEAT_CLOCKS

	clocks_to_check = 10;							# CLOCKS_TO_CHECK
	wait_cycle = 209999;							# WAIT_CYCLE
}
